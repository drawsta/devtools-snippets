[
  {
    "name": "export-snippets.js",
    "content": "// export-snippets.js\n// 1. Open a DevTools of the DevTools\n//    Press Ctrl+Shift+i to open a DevTools pane, then undock it into separate window\n//    On the opened DevTools pane, press Ctrl+Shift+i again to open a DevTools of the DevTools.\n// 2. Run export-snippets.js\n(function() {\n    'use strict';\n\n    function export2SingleFile(content, fileName, contentType) {\n        let a = document.createElement(\"a\");\n        let blob = new Blob([content], {type: contentType});\n        a.href = URL.createObjectURL(blob);\n        a.download = fileName;\n        a.click();\n    }\n\n    InspectorFrontendHost.getPreferences(_ => {\n        export2SingleFile(_.scriptSnippets, 'snippets.json', 'application/json')\n    });\n})();\n"
  },
  {
    "name": "log-globals.js",
    "content": "// log-globals.js\n// https://github.com/sindresorhus/log-globals\n(function () {\n  \"use strict\";\n\n  function getIframe() {\n    var el = document.createElement(\"iframe\");\n    el.style.display = \"none\";\n    document.body.appendChild(el);\n    var win = el.contentWindow;\n    document.body.removeChild(el);\n    return win;\n  }\n\n  function detectGlobals() {\n    var iframe = getIframe();\n    var ret = Object.create(null);\n\n    for (var prop in window) {\n      if (!(prop in iframe)) {\n        ret[prop] = window[prop];\n      }\n    }\n\n    return ret;\n  }\n\n  console.log(detectGlobals());\n})();\n"
  },
  {
    "name": "import-snippets.js",
    "content": "// import-snippets.js\n// 1. Open a DevTools of the DevTools\n//    Press Ctrl+Shift+i to open a DevTools pane, then undock it into separate window\n//    On the opened DevTools pane, press Ctrl+Shift+i again to open a DevTools of the DevTools.\n// 2. Run import-snippets.js\n// https://stackoverflow.com/questions/19025718/which-file-does-snippets-of-chrome-dev-tool-saved-at\n// Clear all snippets: InspectorFrontendHost.setPreference(\"scriptSnippets\", \"\");\n(function() {\n    'use strict';\n    \n    const url = \"https://drawsta.github.io/devtools-snippets/snippets.json\";\n    new Promise((resolve, reject) => {\n        fetch(url)\n            .then((response) => {\n                return response.json();\n            })\n            .then(data_from_fetched => {\n                InspectorFrontendHost.setPreference(\"scriptSnippets\", JSON.stringify(data_from_fetched));\n            });\n    });\n})(); \n"
  },
  {
    "name": "cssreload.js",
    "content": "// cssreload.js\n// https://github.com/bgrins/devtools-snippets\n// Removes then reloads all the CSS files in the current page\n\n(function () {\n  function insertAfter(newElement, targetElement) {\n    var parent = targetElement.parentNode;\n    if (parent.lastChild == targetElement) {\n      parent.appendChild(newElement);\n    } else {\n      parent.insertBefore(newElement, targetElement.nextSibling);\n    }\n  }\n\n  function reloadStyleSheet(stylesheet) {\n    var element = stylesheet.ownerNode;\n    var clone = element.cloneNode(false);\n    clone.href = addRandomToUrl(clone.href);\n    clone.addEventListener(\"load\", function () {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    insertAfter(clone, element);\n  }\n\n  function addRandomToUrl(input) {\n    // prevent CSS caching\n    var hasRnd = /([?&])_=[^&]*/,\n      hasQueryString = /\\?/,\n      hasHash = /(.+)#(.+)/,\n      hash = null,\n      rnd = Math.random();\n\n    var hashMatches = input.match(hasHash);\n    if (hashMatches) {\n      input = hashMatches[1];\n      hash = hashMatches[2];\n    }\n    url = hasRnd.test(input)\n      ? input.replace(hasRnd, \"$1_=\" + rnd)\n      : input + (hasQueryString.test(input) ? \"&\" : \"?\") + \"_=\" + rnd;\n    if (hash) url += \"#\" + hash;\n    return url;\n  }\n\n  [].forEach.call(document.styleSheets, function (styleSheet) {\n    if (!styleSheet.href) return;\n    console.log(\"reload \" + styleSheet.href);\n    reloadStyleSheet(styleSheet);\n  });\n})();\n"
  },
  {
    "name": "jquerify.js",
    "content": "// jquerify.js\n// https://github.com/bgrins/devtools-snippets\n// Add jQuery to any page that does not have it already.\n\n(function () {\n  if (!window.jQuery) {\n    var dollarInUse = !!window.$;\n    var s = document.createElement(\"script\");\n    // omit the version completely to get the latest one\n    s.setAttribute(\"src\", \"//cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js\");\n    s.addEventListener(\"load\", function () {\n      console.log(\"jQuery loaded!\");\n\n      if (dollarInUse) {\n        jQuery.noConflict();\n        console.log(\"`$` already in use; use `jQuery`\");\n      }\n    });\n\n    document.body.appendChild(s);\n  }\n})();\n"
  },
  {
    "name": "dataurl.js",
    "content": "// dataurl.js\n// https://github.com/bgrins/devtools-snippets\n// Print out data URLs for all images / canvases on the page.\n\n(function () {\n  console.group(\"Data URLs\");\n\n  [].forEach.call(document.querySelectorAll(\"img\"), function (i) {\n    var c = document.createElement(\"canvas\");\n    var ctx = c.getContext(\"2d\");\n    c.width = i.width;\n    c.height = i.height;\n\n    try {\n      ctx.drawImage(i, 0, 0);\n      console.log(i, c.toDataURL());\n    } catch (e) {\n      console.log(\n        i,\n        \"No Permission - try opening this image in a new tab and running the snippet again?\",\n        i.src\n      );\n    }\n  });\n\n  [].forEach.call(document.querySelectorAll(\"canvas\"), function (c) {\n    try {\n      console.log(c, c.toDataURL());\n    } catch (e) {\n      console.log(c, \"No Permission\");\n    }\n  });\n\n  console.groupEnd(\"Data URLs\");\n})();\n"
  },
  {
    "name": "performance.js",
    "content": "// performance.js\n// https://github.com/bgrins/devtools-snippets\n// Print out window.performance information.\n// https://developer.mozilla.org/en-US/docs/Navigation_timing\n\n(function () {\n\n  var t = window.performance.timing;\n  var lt = window.chrome && window.chrome.loadTimes && window.chrome.loadTimes();\n  var timings = [];\n\n  timings.push({\n    label: \"Time Until Page Loaded\",\n    time: t.loadEventEnd - t.navigationStart + \"ms\"\n  });\n  timings.push({\n    label: \"Time Until DOMContentLoaded\",\n    time: t.domContentLoadedEventEnd - t.navigationStart + \"ms\"\n  });\n  timings.push({\n    label: \"Total Response Time\",\n    time: t.responseEnd - t.requestStart + \"ms\"\n  });\n  timings.push({\n    label: \"Connection\",\n    time: t.connectEnd - t.connectStart + \"ms\"\n  });\n  timings.push({\n    label: \"Response\",\n    time: t.responseEnd - t.responseStart + \"ms\"\n  });\n  timings.push({\n    label: \"Domain Lookup\",\n    time: t.domainLookupEnd - t.domainLookupStart + \"ms\"\n  });\n  timings.push({\n    label: \"Load Event\",\n    time: t.loadEventEnd - t.loadEventStart + \"ms\"\n  });\n  timings.push({\n    label: \"Unload Event\",\n    time: t.unloadEventEnd - t.unloadEventStart + \"ms\"\n  });\n  timings.push({\n    label: \"DOMContentLoaded Event\",\n    time: t.domContentLoadedEventEnd - t.domContentLoadedEventStart + \"ms\"\n  });\n  if(lt) {\n    if(lt.wasNpnNegotiated) {\n      timings.push({\n        label: \"NPN negotiation protocol\",\n        time: lt.npnNegotiatedProtocol\n      });\n    }\n    timings.push({\n      label: \"Connection Info\",\n      time: lt.connectionInfo\n    });\n    timings.push({\n      label: \"First paint after Document load\",\n      time: Math.ceil(lt.firstPaintTime - lt.finishDocumentLoadTime) + \"ms\"\n    });\n  }\n\n  var navigation = window.performance.navigation;\n  var navigationTypes = { };\n  navigationTypes[navigation.TYPE_NAVIGATENEXT || 0] = \"Navigation started by clicking on a link, or entering the URL in the user agent's address bar, or form submission.\",\n  navigationTypes[navigation.TYPE_RELOAD] = \"Navigation through the reload operation or the location.reload() method.\",\n  navigationTypes[navigation.TYPE_BACK_FORWARD] = \"Navigation through a history traversal operation.\",\n  navigationTypes[navigation.TYPE_UNDEFINED] = \"Navigation type is undefined.\",\n\n  console.group(\"window.performance\");\n\n  console.log(window.performance);\n\n  console.group(\"Navigation Information\");\n  console.log(navigationTypes[navigation.type]);\n  console.log(\"Number of redirects that have taken place: \", navigation.redirectCount)\n  console.groupEnd(\"Navigation Information\");\n\n  console.group(\"Timing\");\n  console.log(window.performance.timing);\n  console.table(timings, [\"label\", \"time\"]);\n  console.groupEnd(\"Timing\");\n\n  console.groupEnd(\"window.performance\");\n\n})();\n"
  },
  {
    "name": "log.js",
    "content": "// log.js\n// https://github.com/bgrins/devtools-snippets\n// Adds a `log` function to window object.\n// http://www.briangrinstead.com/blog/console-log-helper-function\n\n(function () {\n  window.log = Function.prototype.bind.call(console.log, console);\n})();\n"
  },
  {
    "name": "plainforms.js",
    "content": "// plainforms.js\n// https://github.com/bgrins/devtools-snippets\n// Remove HTML5 form features (validations and special input types).\n\n(function () {\n\n  ['maxlength', 'required', 'min', 'max', 'pattern', 'step' ].forEach(function (attr) {\n    [].forEach.call(document.querySelectorAll(\"[\" + attr + \"]\"), function (node) {\n      node.removeAttribute(attr);\n    });\n  });\n\n  ['tel', 'url', 'email', 'datetime', 'date', 'month', 'week', 'time', 'datetime-local', 'number', 'range', 'color'].forEach(function (type) {\n    [].forEach.call(document.querySelectorAll(\"input[type=\" + type + \"]\"), function (node) {\n      node.setAttribute('type', 'text');\n    });\n  });\n\n  console.info(\"All HTML5 form validations have been removed.\");\n})();\n"
  },
  {
    "name": "formcontrols.js",
    "content": "// formcontrols.js\n// https://github.com/bgrins/devtools-snippets\n// Print out forms and their controls\n\n(function() {\n\n  var forms = document.querySelectorAll(\"form\");\n\n  for (var i = 0, len = forms.length; i < len; i++) {\n    var tab = [ ];\n\n    console.group(\"HTMLForm \\\"\" + forms[i].name + \"\\\": \" + forms[i].action);\n    console.log(\"Element:\", forms[i], \"\\nName:    \"+forms[i].name+\"\\nMethod:  \"+forms[i].method.toUpperCase()+\"\\nAction:  \"+forms[i].action || \"null\");\n\n    [\"input\", \"textarea\", \"select\"].forEach(function (control) {\n      [].forEach.call(forms[i].querySelectorAll(control), function (node) {\n        tab.push({\n          \"Element\": node,\n          \"Type\": node.type,\n          \"Name\": node.name,\n          \"Value\": node.value,\n          \"Pretty Value\": (isNaN(node.value) || node.value === \"\" ? node.value : parseFloat(node.value))\n        });\n      });\n    });\n\n    console.table(tab);\n    console.groupEnd();\n  }\n})();\n"
  },
  {
    "name": "querystringvalues.js",
    "content": "// querystringvalues.js\n// https://github.com/bgrins/devtools-snippets\n// Print out key/value pairs from querystring.\n\n(function () {\n  var url = location;\n  var querystring = location.search.slice(1);\n  var tab = querystring.split(\"&\").map(function (qs) {\n    return {\n      Key: qs.split(\"=\")[0],\n      Value: qs.split(\"=\")[1],\n      \"Pretty Value\": decodeURIComponent(qs.split(\"=\")[1]).replace(/\\+/g, \" \"),\n    };\n  });\n\n  console.group(\"Querystring Values\");\n  console.log(\"URL: \" + url + \"\\nQS:  \" + querystring);\n  console.table(tab);\n  console.groupEnd(\"Querystring Values\");\n})();\n"
  },
  {
    "name": "hashlink.js",
    "content": "// hashlink.js\n// https://github.com/bgrins/devtools-snippets\n// Click on an element to print out the closest hash link.\n\n(function () {\n  function logHashlink(e) {\n    document.removeEventListener(\"mousedown\", logHashlink, true);\n\n    var node = e.target;\n    var id = null;\n    while (node != null) {\n      if (node.tagName === \"A\" && node.name) {\n        id = node.name;\n        break;\n      }\n\n      if (node.id) {\n        id = node.id;\n        break;\n      }\n\n      node = node.parentNode;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    var URL =\n      window.location.origin +\n      window.location.pathname +\n      window.location.search;\n\n    console.group(\"Hashlink\");\n    console.log(\"Clicked on \", e.target);\n    if (id === null) {\n      console.log(\"No ID Found - closest anchor: \" + URL);\n    } else {\n      console.log(\"Closest linkable element: \", node);\n      console.log(URL + \"#\" + id);\n    }\n    console.groupEnd(\"Hashlink\");\n  }\n\n  function stopClickEvent(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    document.removeEventListener(\"click\", stopClickEvent, true);\n  }\n\n  document.addEventListener(\"mousedown\", logHashlink, true);\n  document.addEventListener(\"click\", stopClickEvent, true);\n\n  return \"hashlink: Click on an element to log it's closest hash link\";\n})();\n"
  },
  {
    "name": "console-save.js",
    "content": "// console-save.js\n(function (console) {\n  console.save = function (data, filename) {\n    if (!data) {\n      console.error(\"Console.save: No data\");\n      return;\n    }\n\n    if (!filename) filename = \"console.json\";\n\n    if (typeof data === \"object\") {\n      data = JSON.stringify(data, undefined, 4);\n    }\n\n    var blob = new Blob([data], { type: \"text/json\" }),\n      e = document.createEvent(\"MouseEvents\"),\n      a = document.createElement(\"a\");\n\n    a.download = filename;\n    a.href = window.URL.createObjectURL(blob);\n    a.dataset.downloadurl = [\"text/json\", a.download, a.href].join(\":\");\n    e.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    a.dispatchEvent(e);\n  };\n})(console);\n"
  },
  {
    "name": "viewcookies.js",
    "content": "// viewcookies.js\n// https://github.com/bgrins/devtools-snippets\n// Shows all cookies stored in document.cookies in a console.table\n\n(function () {\n  \"use strict\";\n\n  window.viewCookies = function () {\n    if (document.cookie) {\n      const cookies = document.cookie.split(/; ?/).map((s) => {\n        const [, key, value] = s.match(/^(.*?)=(.*)$/);\n        return {\n          key,\n          value: decodeURIComponent(value),\n        };\n      });\n\n      console.table(cookies);\n    } else {\n      console.warn(\"document.cookie is empty!\");\n    }\n  };\n})();\n\nwindow.viewCookies();\n"
  },
  {
    "name": "allcolors.js",
    "content": "// allcolors.js\n// https://github.com/bgrins/devtools-snippets\n// Print out CSS colors used in elements on the page.\n\n(function () {\n  // Should include colors from elements that have a border color but have a zero width?\n  var includeBorderColorsWithZeroWidth = false;\n\n  var allColors = {};\n  var props = [\n    \"background-color\",\n    \"color\",\n    \"border-top-color\",\n    \"border-right-color\",\n    \"border-bottom-color\",\n    \"border-left-color\",\n  ];\n  var skipColors = {\n    \"rgb(0, 0, 0)\": 1,\n    \"rgba(0, 0, 0, 0)\": 1,\n    \"rgb(255, 255, 255)\": 1,\n  };\n\n  [].forEach.call(document.querySelectorAll(\"*\"), function (node) {\n    var nodeColors = {};\n    props.forEach(function (prop) {\n      var color = window.getComputedStyle(node, null).getPropertyValue(prop),\n        thisIsABorderProperty = prop.indexOf(\"border\") != -1,\n        notBorderZero = thisIsABorderProperty\n          ? window.getComputedStyle(node, null).getPropertyValue(prop.replace(\"color\", \"width\")) !== \"0px\"\n          : true,\n        colorConditionsMet;\n\n      if (includeBorderColorsWithZeroWidth) {\n        colorConditionsMet = color && !skipColors[color];\n      } else {\n        colorConditionsMet = color && !skipColors[color] && notBorderZero;\n      }\n\n      if (colorConditionsMet) {\n        if (!allColors[color]) {\n          allColors[color] = {\n            count: 0,\n            nodes: [],\n          };\n        }\n\n        if (!nodeColors[color]) {\n          allColors[color].count++;\n          allColors[color].nodes.push(node);\n        }\n\n        nodeColors[color] = true;\n      }\n    });\n  });\n\n  function rgbTextToRgbArray(rgbText) {\n    return rgbText\n      .replace(/\\s/g, \"\")\n      .match(/\\d+,\\d+,\\d+/)[0]\n      .split(\",\")\n      .map(function (num) {\n        return parseInt(num, 10);\n      });\n  }\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  function rgbToHex(rgbArray) {\n    var r = rgbArray[0],\n      g = rgbArray[1],\n      b = rgbArray[2];\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  var allColorsSorted = [];\n  for (var i in allColors) {\n    var rgbArray = rgbTextToRgbArray(i);\n    var hexValue = rgbToHex(rgbArray);\n\n    allColorsSorted.push({\n      key: i,\n      value: allColors[i],\n      hexValue: hexValue,\n    });\n  }\n\n  allColorsSorted = allColorsSorted.sort(function (a, b) {\n    return b.value.count - a.value.count;\n  });\n\n  var nameStyle = \"font-weight:normal;\";\n  var countStyle = \"font-weight:bold;\";\n  function colorStyle(color) {\n    return \"background:\" + color + \";color:\" + color + \";border:1px solid #333;\";\n  }\n\n  console.group(\n    \"Total colors used in elements on the page: \" + window.location.href + \" are \" + allColorsSorted.length,\n  );\n  allColorsSorted.forEach(function (c) {\n    console.groupCollapsed(\n      \"%c    %c \" + c.key + \" \" + c.hexValue + \" %c(\" + c.value.count + \" times)\",\n      colorStyle(c.key),\n      nameStyle,\n      countStyle,\n    );\n    c.value.nodes.forEach(function (node) {\n      console.log(node);\n    });\n    console.groupEnd();\n  });\n  console.groupEnd(\"All colors used in elements on the page\");\n})();\n"
  },
  {
    "name": "showheaders.js",
    "content": "// showheaders.js\n// https://github.com/bgrins/devtools-snippets\n// Print out response headers for current URL.\n\n(function () {\n  var request = new XMLHttpRequest();\n  request.open(\"HEAD\", window.location, true);\n\n  request.onload = request.onerror = function () {\n    var headers = request.getAllResponseHeaders();\n    var tab = headers\n      .split(\"\\n\")\n      .map(function (h) {\n        return { Key: h.split(\": \")[0], Value: h.split(\": \")[1] };\n      })\n      .filter(function (h) {\n        return h.Value !== undefined;\n      });\n\n    console.group(\"Request Headers\");\n    console.log(headers);\n    console.table(tab);\n    console.groupEnd(\"Request Headers\");\n  };\n\n  request.send(null);\n})();\n"
  }
]
